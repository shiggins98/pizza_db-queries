SELECT
	o.order_id,
	i.item_price,
	o.quantity,
	i.item_cat,
	i.item_name,
	o.created_at,
	a.delivery_address1,
	a.delivery_address2,
	a.delivery_city,
	a.delivery_zipcode,
	o.delivery 
FROM
	orders o
	LEFT JOIN item i ON o.item_id = i.item_id
	LEFT JOIN address a ON o.add_id = a.add_id


We'll need 2 different views of the data

To get #1 we need # of orders*ingredient quantity in recipe

Order and item table

SELECT
o.item_id,
i.sku,
i.item_name
sum(o.quantity) as order_quantity
from orders o
left join item i on o.item_id=i.item_id
group by o.item_id, i.sku, i.item_name

This gives us orders per pizza, but we need to break down the pizzas by ingredients, from the recipe table

SELECT
o.item_id,
i.sku,
i.item_name,
r.ing_id,
r.quantity as recipe_quantity,
sum(o.quantity) as order_quantity
from orders o
left join item i on o.item_id=i.item_id
left join recipe r on i.sku=r.recipe_id
group by 
o.item_id, i.sku, i.item_name, r.ing_id, r.quantity

We also need the ingredient name, which means we’ll have to join the ing table as well

SELECT
o.item_id,
i.sku,
i.item_name,
r.ing_id,
ing.ing_name,
r.quantity as recipe_quantity,
sum(o.quantity) as order_quantity
from orders o
left join item i on o.item_id=i.item_id
left join recipe r on i.sku=r.recipe_id
left join ingredient ing on ing.ing_id=r.ing_id
group by 
o.item_id, i.sku, i.item_name, r.ing_id, r.quantity, ing.ing_name

To calculate total cost of ingredients we just need to multiply the unit cost by the unit weight (from the ingredient table, which is already joined)
SELECT
o.item_id,
i.sku,
i.item_name,
r.ing_id,
ing.ing_name,
r.quantity as recipe_quantity,
sum(o.quantity) as order_quantity
ing.ing_weight,
ing.ing_price
from orders o
left join item i on o.item_id=i.item_id
left join recipe r on i.sku=r.recipe_id
left join ingredient ing on ing.ing_id=r.ing_id
group by 
o.item_id, i.sku, i.item_name, r.ing_id, r.quantity, ing.ing_name, ing.ing_weight, ing.ing_price

We need to multiply order quantity by recipe quantity, however, order quantity is already an aggregated field, so we need to create a sub query, in which the current Query will be aliased as s1

SELECT
*
FROM
(SELECT
	o.item_id,
	i.sku,
	i.item_name,
	r.ing_id,
	ing.ing_name,
	r.quantity AS recipe_quantity,
	sum( o.quantity ) AS order_quantity ing.ing_weight,
	ing.ing_price 
FROM
	orders o
	LEFT JOIN item i ON o.item_id = i.item_id
	LEFT JOIN recipe r ON i.sku = r.recipe_id
	LEFT JOIN ingredient ing ON ing.ing_id = r.ing_id 
GROUP BY
	o.item_id,
	i.sku,
	i.item_name,
	r.ing_id,
	r.quantity,
	ing.ing_name,
	ing.ing_weight,
	ing.ing_price) s1

Now we can specify what columns we want from the query result, as if it were a new table.

SELECT
	s1.item_name,
	s1.ing_id,
	s1.ing_name,
	s1.ing_weight,
	s1.ing_price,
	s1.order_quantity,
	s1.recipe_quantity,
	s1.order_quantity*s1.recipe_quantity as ordered_weight
	s1.ing_price/s1.ing_weight as unit_cost,
	(s1.order_quantity*s1.recipe_quantity)*(s1.ing_price/s1.ing_weight) as ingredient_cost
FROM
(SELECT
	o.item_id,
	i.sku,
	i.item_name,
	r.ing_id,
	ing.ing_name,
	r.quantity AS recipe_quantity,
	sum( o.quantity ) AS order_quantity 
	ing.ing_weight,
	ing.ing_price 
FROM
	orders o
	LEFT JOIN item i ON o.item_id = i.item_id
	LEFT JOIN recipe r ON i.sku = r.recipe_id
	LEFT JOIN ingredient ing ON ing.ing_id = r.ing_id 
GROUP BY
	o.item_id,
	i.sku,
	i.item_name,
	r.ing_id,
	r.quantity,
	ing.ing_name,
	ing.ing_weight,
	ing.ing_price) s1

Beautified
SELECT
	s1.item_name,
	s1.ing_id,
	s1.ing_name,
	s1.ing_weight,
	s1.ing_price,
	s1.order_quantity,
	s1.recipe_quantity,
	s1.order_quantity * s1.recipe_quantity AS ordered_weight,
	s1.ing_price / s1.ing_weight AS unit_cost,
	( s1.order_quantity * s1.recipe_quantity )*(
		s1.ing_price / s1.ing_weight 
	) AS ingredient_cost 
FROM
	(
	SELECT
		o.item_id,
		i.sku,
		i.item_name,
		r.ing_id,
		ing.ing_name,
		r.quantity AS recipe_quantity,
		sum( o.quantity ) AS order_quantity,
		ing.ing_weight,
		ing.ing_price 
	FROM
		orders o
		LEFT JOIN item i ON o.item_id = i.item_id
		LEFT JOIN recipe r ON i.sku = r.recipe_id
		LEFT JOIN ingredient ing ON ing.ing_id = r.ing_id 
	GROUP BY
		o.item_id,
		i.sku,
		i.item_name,
		r.ing_id,
		r.quantity,
		ing.ing_name,
		ing.ing_weight,
	ing.ing_price 
	) s1
Now we have what is needed for #2 and 3

To get #4 we’ll create a view to simplify how the query looks

We’ll need 
Total weight ordered
Inventory Amount
Inventory remaining per ingredient

SELECT
	ing_name,
	SUM(ordered_weight) AS ordered_weight
FROM
	stock1
	GROUP BY ing_name

Now we need total weight of inventory for each ingredient

SELECT
	*
FROM
(SELECT
	ing_id,
	ing_name,
	SUM(ordered_weight) AS ordered_weight
FROM
	stock1
	GROUP BY ing_name, ing_id) s2
	LEFT JOIN inventory inv ON inv.item_id = s2.ing_id

Now we have the quantity for each ingredient, but we also need to add in the total weight in stock from the ingredients table (weight*quantity)

SELECT
	s2.ing_name,
	s2.ordered_weight,
	ing.ing_weight*inv.quantity AS total_inv_weight
FROM
(SELECT
	ing_id,
	ing_name,
	SUM(ordered_weight) AS ordered_weight
FROM
	stock1
	GROUP BY ing_name, ing_id) s2
	
	LEFT JOIN inventory inv ON inv.item_id = s2.ing_id
	LEFT JOIN ingredient ing ON ing.ing = s2.ing_id

Now we just need to calculate the total weight subtracted by the ordered weight to get the remaining weight

SELECT
	s2.ing_name,
	s2.ordered_weight,
	ing.ing_weight*inv.quantity AS total_inv_weight,
	(ing.ing_weight*inv.quantity)-s2.ordered_weight AS remaining_weight
FROM
(SELECT
	ing_id,
	ing_name,
	SUM(ordered_weight) AS ordered_weight
FROM
	stock1
	GROUP BY ing_name, ing_id) s2
	
	LEFT JOIN inventory inv ON inv.item_id = s2.ing_id
	LEFT JOIN ingredient ing ON ing.ing = s2.ing_id


Beautified
SELECT
	s2.ing_name,
	s2.ordered_weight,
	ing.ing_weight * inv.quantity AS total_inv_weight,
	( ing.ing_weight * inv.quantity )- s2.ordered_weight AS remaining_weight 
FROM
	( SELECT ing_id, ing_name, SUM( ordered_weight ) AS ordered_weight FROM stock1 GROUP BY ing_name, ing_id ) s2
	LEFT JOIN inventory inv ON inv.item_id = s2.ing_id
	LEFT JOIN ingredient ing ON ing.ing_id = s2.ing_id

STAFF QUERY
Total Staff Cost
Total Hours Worked
List of workers on a given date wi/ shift and comp. data

SELECT
	r.date,
	s.first_name,
	s.last_name,
	s.hourly_rate,
	sh.start_time,
	sh.end_time,
	(s.hourly_rate * TIMESTAMPDIFF(MINUTE, sh.start_time, sh.end_time))/60 AS staff_cost,
	(TIMESTAMPDIFF(MINUTE,sh.start_time, sh.end_time))/60 AS hours_in_shift
FROM
	rota r
LEFT JOIN staff s ON r.staff_id = s.staff_id
LEFT JOIN shift sh ON r.shift_id = sh.shift_id

Beautified
SELECT
	r.DATE,
	s.first_name,
	s.last_name,
	s.hourly_rate,
	sh.start_time,
	sh.end_time,
	(
	s.hourly_rate * TIMESTAMPDIFF( MINUTE, sh.start_time, sh.end_time ))/ 60 AS staff_cost,
	(
	TIMESTAMPDIFF( MINUTE, sh.start_time, sh.end_time ))/ 60 AS hours_in_shift 
FROM
	rota r
	LEFT JOIN staff s ON r.staff_id = s.staff_id
	LEFT JOIN shift sh ON r.shift_id = sh.shift_id
